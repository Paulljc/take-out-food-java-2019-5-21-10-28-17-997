import java.util.List;
import java.util.ArrayList;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        int totalPrice = 0;
        int orderDiscount1 = 0;
        int orderDiscount2 = 0;
        List<String> halfPriceFood = new ArrayList<>();
        List<String> allHalfPriceFood = new ArrayList<>();
        List<FoodInfo> FoodInfos = new ArrayList<>();

        //获取所有菜品及优惠数据
        List<Item> allFood = this.itemRepository.findAll();
        List<SalesPromotion> allPromotions = this.salesPromotionRepository.findAll();
        //获取所有半价菜品数据
        for(SalesPromotion salesPromotion: allPromotions) {
            if(salesPromotion.getType().equals("50%_DISCOUNT_ON_SPECIFIED_ITEMS")) {
                allHalfPriceFood = salesPromotion.getRelatedItems();
            }
        }

        //处理输入的菜品数据
        for(String info: inputs) {
            String[] items = info.split("x");
            for(Item item: allFood) {
                if(item.getId().equals(items[0].trim())) {
                    FoodInfos.add(new FoodInfo(item.getName(), item.getPrice(), Integer.parseInt(items[1].trim()), allHalfPriceFood.contains(items[0].trim())));
                }
            }
        }

        StringBuffer order = new StringBuffer("============= 订餐明细 =============\n");
        //计算总价并统计优惠方案1
        for(FoodInfo FoodInfo: FoodInfos) {
            int unitAmount = (int)FoodInfo.getUnitPrice() * FoodInfo.getFoodNum();
            totalPrice += unitAmount;
            order.append(FoodInfo.getFoodName() + " x " + FoodInfo.getFoodNum() + " = " + unitAmount + "元\n");
            //判断是否为半价菜品并计算折扣
            if(FoodInfo.isHalfPriceFood()) {
                halfPriceFood.add(FoodInfo.getFoodName());
                orderDiscount1 += FoodInfo.getUnitPrice() / 2;
            }
        }
        //计算优惠方案2并比较
        if (totalPrice >= 30){
            orderDiscount2 = 6;
            order.append("-----------------------------------\n");
            order.append("使用优惠:\n");
            if (orderDiscount1 >= orderDiscount2){
                totalPrice -= orderDiscount1;
                order.append("指定菜品半价(" + String.join("，", halfPriceFood) + ")，省" + orderDiscount1 + "元\n");
            }else {
                totalPrice -= 6;
                order.append("满30减6元，省6元\n");
            }
        }else {
            if (orderDiscount1 != 0) {
                totalPrice -= orderDiscount1;
                order.append("-----------------------------------\n");
                order.append("使用优惠:\n");
                order.append("指定菜品半价(" + String.join("，", halfPriceFood) + ")，省" + orderDiscount1 + "元\n");
            }
        }
        order.append("-----------------------------------\n");
        order.append("总计："+ totalPrice + "元\n");
        order.append("===================================");
        return order.toString();
    }
}
//记录输入的菜品信息类
class FoodInfo {
    private String foodName;
    private double unitPrice;
    private int foodNum;
    private boolean isHalfPriceFood;
    public FoodInfo(String foodName, double unitPrice, int foodNum, boolean isHalfPriceFood) {
        this.foodName = foodName;
        this.unitPrice = unitPrice;
        this.foodNum = foodNum;
        this.isHalfPriceFood = isHalfPriceFood;
    }
    public String getFoodName() {
        return foodName;
    }
    public double getUnitPrice() {
        return unitPrice;
    }
    public int getFoodNum() {
        return foodNum;
    }
    public boolean isHalfPriceFood() {
        return isHalfPriceFood;
    }
}
